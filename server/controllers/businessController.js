// controllers/businessController.js
import Business from '../models/businessSchema.js';
import { getWeekRange } from '../utils/getWeekRange.js'; // Import the utility function

// Controller function to handle creating a new business document
export const addBusiness = (req, res) => {
    const { weekStartDate, weekEndDate } = getWeekRange(new Date()); // Get the start and end date of the week

    // Using the mongoose constructor to create the business object and assign the according attributes
    // req.body is an object that contains data sent by the client in the body of a request, typically in POST, PUT, or PATCH requests.
    // For example, if a client sends a JSON payload or form data to the server, it will be accessible in req.body
    // In this example - req.body.businessCode - req.body.businessCode refers to the businessCode attribute of the object.
    // Therefore, if the input in the businessCode input field is "1234", req.body.business would be equal to "1234"
    // The same function applies to each of the attribute of the object
    const business = new Business({
        businessCode: req.body.businessCode,
        weekStartDate,  // Generated by the getWeekRange function
        weekEndDate,  // Generated by the getWeekRange function
        totalBookings: req.body.totalBookings,
        occupancyRate: req.body.occupancyRate,
        cancellationRate: req.body.cancellationRate,
        bookingLeadTime: req.body.bookingLeadTime,
        noShowRate: req.body.noShowRate,
        revenuePerBooking: req.body.revenuePerBooking,
        bookingConversionRate: req.body.bookingConversionRate,
        averageBookingValue: req.body.averageBookingValue,
        paymentStatus: req.body.paymentStatus,
        costPerBooking: req.body.costPerBooking,
        customerRetentionRate: req.body.customerRetentionRate,
        seasonalBookingTrends: req.body.seasonalBookingTrends,
        demandForecasting: req.body.demandForecasting,
        revenueForecasting: req.body.revenueForecasting
    });

    // Saving the business to the MongoDB database
    business.save()
        // Once the data is saved, the business information is then sent to the frontend
        .then((result) => res.json(result))
        // If an error occurs, the errors will be output into the console,
        // and the according server status code is set (500 = internal server error)
        .catch((err) => {
            console.log('Error saving business', err);
            res.status(500).send('Error saving business')
        });
};

export const getGraphData = (req, res) => {
    // This API is used to fetch data from the database.
    // The algorithm currently has a manual input for which business data to find,
    // but eventually, the program will send the business code
    Business.find( { businessCode: "BIZ124" })
        .then((result) => res.send(result))
        .catch((err) => {
            console.log('Error saving business', err);
            res.status(500).send('Error fetching business data')
        });
}

export const getWeeklyData = (req, res) => {
    // Defining the conditions, the business document must match the Code, weekStartDate and weekEndDate.
    // If found, the businesses weekly document will be returned
    Business.find({
        businessCode: "BIZ123",
        weekStartDate: "2024-11-10",
        weekEndDate: "2024-11-16"
    })
    .then((result) => res.send(result))
    .catch((err) => {
        console.log('Error saving weekly data', err);
        res.status(500).send('Error fetching weekly data')
    });
}